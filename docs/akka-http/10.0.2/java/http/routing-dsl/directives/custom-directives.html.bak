<!DOCTYPE html>
<html class="no-js" lang="en">

<head>
<title>Custom Directives · Akka HTTP</title>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="description" content='akka-http-docs'/>
<link href="https://fonts.googleapis.com/css?family=Roboto:100normal,100italic,300normal,300italic,400normal,400italic,500normal,500italic,700normal,700italic,900normal,900italicc" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../../../lib/jquery/jquery.min.js"></script>
<script type="text/javascript" src="../../../../js/page.js"></script>
<link rel="stylesheet" type="text/css" href="../../../../lib/normalize.css/normalize.css"/>
<link rel="stylesheet" type="text/css" href="../../../../lib/foundation/dist/foundation.min.css"/>
<link rel="stylesheet" type="text/css" href="../../../../css/page.css"/>

<!--
<link rel="shortcut icon" href="../../../../images/favicon.ico" />
-->
</head>

<body>
<div class="off-canvas-wrapper">
<div class="off-canvas-wrapper-inner" data-off-canvas-wrapper>

<div class="off-canvas position-left" id="off-canvas-menu" data-off-canvas>
<nav class="off-canvas-nav">
<div class="nav-home">
<a href="../../../../index.html" >
<span class="home-icon">⌂</span>Akka HTTP
</a>
<div class="version-number">
10.0.2+20170123-1954
</div>
</div>
<div class="nav-toc">
<ul>
  <li><a href="../../../../java.html">Java Documentation</a>
  <ul>
    <li><a href="../../../../java/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../../../java/http/introduction.html">Introduction</a></li>
      <li><a href="../../../../java/http/configuration.html">Configuration</a></li>
      <li><a href="../../../../java/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../../../java/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../../../java/http/server-side/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../../../java/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../../../java/http/server-side/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../../../java/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../../../java/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../../../java/http/migration-guide/index.html">Migration Guides (Java)</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../../../scala.html">Scala Documentation</a>
  <ul>
    <li><a href="../../../../scala/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../../../scala/http/introduction.html">Introduction</a></li>
      <li><a href="../../../../scala/http/configuration.html">Configuration</a></li>
      <li><a href="../../../../scala/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../../../scala/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../../../scala/http/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../../../scala/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../../../scala/http/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../../../scala/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../../../scala/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../../../scala/http/handling-blocking-operations-in-akka-http-routes.html">Handling blocking operations in Akka HTTP</a></li>
      <li><a href="../../../../scala/http/migration-guide/index.html">Migration Guides</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../../../security.html">Security announcements</a></li>
</ul>
</div>

</nav>
</div>

<div class="off-canvas-content" data-off-canvas-content>

<header class="site-header expanded row">
<div class="small-12 column">
<a href="#" class="off-canvas-toggle hide-for-medium" data-toggle="off-canvas-menu"><svg class="svg-icon svg-icon-menu" version="1.1" id="Menu" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"> <path class="svg-icon-menu-path" fill="#53CDEC" d="M16.4,9H3.6C3.048,9,3,9.447,3,10c0,0.553,0.048,1,0.6,1H16.4c0.552,0,0.6-0.447,0.6-1C17,9.447,16.952,9,16.4,9z M16.4,13
H3.6C3.048,13,3,13.447,3,14c0,0.553,0.048,1,0.6,1H16.4c0.552,0,0.6-0.447,0.6-1C17,13.447,16.952,13,16.4,13z M3.6,7H16.4
C16.952,7,17,6.553,17,6c0-0.553-0.048-1-0.6-1H3.6C3.048,5,3,5.447,3,6C3,6.553,3.048,7,3.6,7z"/></svg>
</a>
<div class="title"><a href="../../../../index.html">Akka HTTP</a></div>

<!--
<a href="https://www.example.com" class="logo show-for-medium">logo</a>
-->
</div>
</header>

<div class="expanded row">

<div class="medium-3 large-2 show-for-medium column">
<nav class="site-nav">
<div class="nav-home">
<a href="../../../../index.html" >
<span class="home-icon">⌂</span>Akka HTTP
</a>
<div class="version-number">
10.0.2+20170123-1954
</div>
</div>
<div class="nav-toc">
<ul>
  <li><a href="../../../../java.html">Java Documentation</a>
  <ul>
    <li><a href="../../../../java/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../../../java/http/introduction.html">Introduction</a></li>
      <li><a href="../../../../java/http/configuration.html">Configuration</a></li>
      <li><a href="../../../../java/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../../../java/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../../../java/http/server-side/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../../../java/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../../../java/http/server-side/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../../../java/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../../../java/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../../../java/http/migration-guide/index.html">Migration Guides (Java)</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../../../scala.html">Scala Documentation</a>
  <ul>
    <li><a href="../../../../scala/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../../../scala/http/introduction.html">Introduction</a></li>
      <li><a href="../../../../scala/http/configuration.html">Configuration</a></li>
      <li><a href="../../../../scala/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../../../scala/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../../../scala/http/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../../../scala/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../../../scala/http/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../../../scala/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../../../scala/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../../../scala/http/handling-blocking-operations-in-akka-http-routes.html">Handling blocking operations in Akka HTTP</a></li>
      <li><a href="../../../../scala/http/migration-guide/index.html">Migration Guides</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../../../security.html">Security announcements</a></li>
</ul>
</div>

</nav>
</div>

<div class="small-12 medium-9 large-10 column">
<section class="site-content">

<div class="page-header row">
<div class="medium-12 show-for-medium column">
<div class="nav-breadcrumbs">
<ul>
  <li><a href="../../../../index.html">Akka HTTP</a></li>
  <li><a href="../../../../java.html">Java Documentation</a></li>
  <li><a href="../../../../java/http/index.html">Akka HTTP</a></li>
  <li><a href="../../../../java/http/routing-dsl/index.html">High-level Server-Side API</a></li>
  <li><a href="../../../../java/http/routing-dsl/directives/index.html">Directives</a></li>
  <li>Custom Directives</li>
</ul>
</div>
</div>
</div>

<div class="page-content row">
<div class="small-12 large-9 column" id="docs">
<a id="custom-directives-java"></a>
<h1><a href="#custom-directives" name="custom-directives" class="anchor"><span class="anchor-link"></span></a>Custom Directives</h1>
<p>Part of the power of akka-http directives comes from the ease with which it’s possible to define custom directives at differing levels of abstraction.</p>
<p>There are essentially three ways of creating custom directives:</p>
<ol>
  <li>By introducing new “labels” for configurations of existing directives</li>
  <li>By transforming existing directives</li>
  <li>By writing a directive “from scratch”</li>
</ol>
<h2><a href="#configuration-labeling" name="configuration-labeling" class="anchor"><span class="anchor-link"></span></a>Configuration Labeling</h2>
<p>The easiest way to create a custom directive is to simply assign a new name for a certain configuration of one or more existing directives. In fact, most of the predefined akka-http directives can be considered named configurations of more low-level directives.</p>
<p>The basic technique is explained in the chapter about Composing Directives, where, for example, a new directive <code>getOrPut</code> is defined like this:</p>
<pre class="prettyprint"><code class="language-java">public Route getOrPut(Supplier&lt;Route&gt; inner) {
  return get(inner).orElse(put(inner));
}
Route route = getOrPut(() -&gt; complete(&quot;ok&quot;));</code></pre>
<p>Multiple directives can be nested to produce a single directive out of multiple like this:</p>
<pre class="prettyprint"><code class="language-java">// the composed custom directive
/**
 * @param authenticate A function returns a set of roles for the credentials of a user
 * @param inner Inner route to execute if the provided credentials has the given role
 *              if not, the request is completed with a
 */
public Route headerBasedAuth(Function&lt;MyCredentials, Set&lt;MyRole&gt;&gt; authenticate, MyRole requiredRole, Supplier&lt;Route&gt; inner) {
  return headerValueByName(&quot;X-My-User-Id&quot;, (userId) -&gt; {
    return headerValueByName(&quot;X-My-User-Secret&quot;, (secret) -&gt; {
      Set&lt;MyRole&gt; userRoles = authenticate.apply(new MyCredentials(userId, secret));
      if (userRoles.contains(requiredRole)) {
        return inner.get();
      } else {
        return complete(StatusCodes.FORBIDDEN, &quot;Role &quot; + requiredRole + &quot; required for access&quot;);
      }
    });
  });
}
// a function for authentication
Function&lt;MyCredentials, Set&lt;MyRole&gt;&gt; authLogic =
  (credentials) -&gt; {
    if (credentials.userId.equals(&quot;admin&quot;) &amp;&amp; credentials.safeSecretVerification(&quot;secret&quot;))
      return new HashSet&lt;&gt;(Arrays.asList(MyRole.USER, MyRole.ADMIN));
    else
      return Collections.emptySet();
  };

// and then using the custom route
Route route = get(() -&gt;
  path(&quot;admin&quot;, () -&gt;
    headerBasedAuth(authLogic, MyRole.ADMIN, () -&gt; complete(StatusCodes.OK, &quot;admin stuff&quot;))
  )
);</code></pre>
<p>Another example is the <a href="method-directives/index.html#methoddirectives-java">MethodDirectives</a> which are simply instances of a preconfigured <a href="method-directives/method.html#method-java">method</a> directive. The low-level directives that most often form the basis of higher-level “named configuration” directives are grouped together in the <a href="basic-directives/index.html#basicdirectives-java">BasicDirectives</a> trait.</p>
<div class="nav-next">
<p><strong>Next:</strong> <a href="../../../../java/http/routing-dsl/marshalling.html">Marshalling &amp; Unmarshalling</a></p>
</div>
</div>
<div class="large-3 show-for-large column" data-sticky-container>
<nav class="sidebar sticky" data-sticky data-anchor="docs" data-sticky-on="large">
<div class="page-nav">
<div class="nav-title">On this page:</div>
<div class="nav-toc">
<ul>
  <li><a href="../../../../java/http/routing-dsl/directives/custom-directives.html#custom-directives">Custom Directives</a>
  <ul>
    <li><a href="../../../../java/http/routing-dsl/directives/custom-directives.html#configuration-labeling">Configuration Labeling</a></li>
  </ul></li>
</ul>
</div>
</div>
</nav>
</div>
</div>

</section>
</div>

</div>

<footer class="site-footer">

<section class="site-footer-nav">
<div class="expanded row">
<div class="small-12 large-offset-2 large-10 column">
<div class="row site-footer-content">

<div class="small-12 medium-4 large-3 text-center column">
<div class="nav-links">
<ul>
<!-- <li><a href="https://www.example.com/products/">Products</a> -->
</ul>
</div>
</div>

</div>
</div>
</div>
</section>

<section class="site-footer-base">
<div class="expanded row">
<div class="small-12 large-offset-2 large-10 column">
<div class="row site-footer-content">

<div class="small-12 text-center large-9 column">

<!--
<div class="copyright">
<span class="text">&copy; 2017</span>
<a href="https://www.example.com" class="logo">logo</a>
</div>
-->
</div>

</div>
</div>
</div>
</section>
</footer>

</div>
</div>
</div>
</body>

<script type="text/javascript" src="../../../../lib/foundation/dist/foundation.min.js"></script>
<script type="text/javascript">jQuery(document).foundation();</script>
<script type="text/javascript" src="../../../../js/magellan.js"></script>

<style type="text/css">@import "../../../../lib/prettify/prettify.css";</style>
<script type="text/javascript" src="../../../../lib/prettify/prettify.js"></script>
<script type="text/javascript" src="../../../../lib/prettify/lang-scala.js"></script>
<script type="text/javascript">jQuery(function(){window.prettyPrint && prettyPrint()});</script>

</html>
