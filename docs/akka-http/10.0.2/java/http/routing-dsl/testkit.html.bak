<!DOCTYPE html>
<html class="no-js" lang="en">

<head>
<title>Route Testkit · Akka HTTP</title>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="description" content='akka-http-docs'/>
<link href="https://fonts.googleapis.com/css?family=Roboto:100normal,100italic,300normal,300italic,400normal,400italic,500normal,500italic,700normal,700italic,900normal,900italicc" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../../lib/jquery/jquery.min.js"></script>
<script type="text/javascript" src="../../../js/page.js"></script>
<link rel="stylesheet" type="text/css" href="../../../lib/normalize.css/normalize.css"/>
<link rel="stylesheet" type="text/css" href="../../../lib/foundation/dist/foundation.min.css"/>
<link rel="stylesheet" type="text/css" href="../../../css/page.css"/>

<!--
<link rel="shortcut icon" href="../../../images/favicon.ico" />
-->
</head>

<body>
<div class="off-canvas-wrapper">
<div class="off-canvas-wrapper-inner" data-off-canvas-wrapper>

<div class="off-canvas position-left" id="off-canvas-menu" data-off-canvas>
<nav class="off-canvas-nav">
<div class="nav-home">
<a href="../../../index.html" >
<span class="home-icon">⌂</span>Akka HTTP
</a>
<div class="version-number">
10.0.2+20170123-1954
</div>
</div>
<div class="nav-toc">
<ul>
  <li><a href="../../../java.html">Java Documentation</a>
  <ul>
    <li><a href="../../../java/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../../java/http/introduction.html">Introduction</a></li>
      <li><a href="../../../java/http/configuration.html">Configuration</a></li>
      <li><a href="../../../java/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../../java/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../../java/http/server-side/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../../java/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../../java/http/server-side/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../../java/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../../java/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../../java/http/migration-guide/index.html">Migration Guides (Java)</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../../scala.html">Scala Documentation</a>
  <ul>
    <li><a href="../../../scala/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../../scala/http/introduction.html">Introduction</a></li>
      <li><a href="../../../scala/http/configuration.html">Configuration</a></li>
      <li><a href="../../../scala/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../../scala/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../../scala/http/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../../scala/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../../scala/http/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../../scala/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../../scala/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../../scala/http/handling-blocking-operations-in-akka-http-routes.html">Handling blocking operations in Akka HTTP</a></li>
      <li><a href="../../../scala/http/migration-guide/index.html">Migration Guides</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../../security.html">Security announcements</a></li>
</ul>
</div>

</nav>
</div>

<div class="off-canvas-content" data-off-canvas-content>

<header class="site-header expanded row">
<div class="small-12 column">
<a href="#" class="off-canvas-toggle hide-for-medium" data-toggle="off-canvas-menu"><svg class="svg-icon svg-icon-menu" version="1.1" id="Menu" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"> <path class="svg-icon-menu-path" fill="#53CDEC" d="M16.4,9H3.6C3.048,9,3,9.447,3,10c0,0.553,0.048,1,0.6,1H16.4c0.552,0,0.6-0.447,0.6-1C17,9.447,16.952,9,16.4,9z M16.4,13
H3.6C3.048,13,3,13.447,3,14c0,0.553,0.048,1,0.6,1H16.4c0.552,0,0.6-0.447,0.6-1C17,13.447,16.952,13,16.4,13z M3.6,7H16.4
C16.952,7,17,6.553,17,6c0-0.553-0.048-1-0.6-1H3.6C3.048,5,3,5.447,3,6C3,6.553,3.048,7,3.6,7z"/></svg>
</a>
<div class="title"><a href="../../../index.html">Akka HTTP</a></div>

<!--
<a href="https://www.example.com" class="logo show-for-medium">logo</a>
-->
</div>
</header>

<div class="expanded row">

<div class="medium-3 large-2 show-for-medium column">
<nav class="site-nav">
<div class="nav-home">
<a href="../../../index.html" >
<span class="home-icon">⌂</span>Akka HTTP
</a>
<div class="version-number">
10.0.2+20170123-1954
</div>
</div>
<div class="nav-toc">
<ul>
  <li><a href="../../../java.html">Java Documentation</a>
  <ul>
    <li><a href="../../../java/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../../java/http/introduction.html">Introduction</a></li>
      <li><a href="../../../java/http/configuration.html">Configuration</a></li>
      <li><a href="../../../java/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../../java/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../../java/http/server-side/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../../java/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../../java/http/server-side/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../../java/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../../java/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../../java/http/migration-guide/index.html">Migration Guides (Java)</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../../scala.html">Scala Documentation</a>
  <ul>
    <li><a href="../../../scala/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../../scala/http/introduction.html">Introduction</a></li>
      <li><a href="../../../scala/http/configuration.html">Configuration</a></li>
      <li><a href="../../../scala/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../../scala/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../../scala/http/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../../scala/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../../scala/http/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../../scala/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../../scala/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../../scala/http/handling-blocking-operations-in-akka-http-routes.html">Handling blocking operations in Akka HTTP</a></li>
      <li><a href="../../../scala/http/migration-guide/index.html">Migration Guides</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../../security.html">Security announcements</a></li>
</ul>
</div>

</nav>
</div>

<div class="small-12 medium-9 large-10 column">
<section class="site-content">

<div class="page-header row">
<div class="medium-12 show-for-medium column">
<div class="nav-breadcrumbs">
<ul>
  <li><a href="../../../index.html">Akka HTTP</a></li>
  <li><a href="../../../java.html">Java Documentation</a></li>
  <li><a href="../../../java/http/index.html">Akka HTTP</a></li>
  <li><a href="../../../java/http/routing-dsl/index.html">High-level Server-Side API</a></li>
  <li>Route Testkit</li>
</ul>
</div>
</div>
</div>

<div class="page-content row">
<div class="small-12 large-9 column" id="docs">
<a id="http-testkit-java"></a>
<h1><a href="#route-testkit" name="route-testkit" class="anchor"><span class="anchor-link"></span></a>Route Testkit</h1>
<p>akka-http has a testkit that provides a convenient way of testing your routes with JUnit. It allows running requests against a route (without hitting the network) and provides means to assert against response properties in a compact way.</p>
<p>To use the testkit you need to take these steps:</p>
<ul>
  <li>add a dependency to the <code>akka-http-testkit</code> module</li>
  <li>derive the test class from <code>JUnitRouteTest</code></li>
  <li>wrap the route under test with <code>RouteTest.testRoute</code> to create a <code>TestRoute</code></li>
  <li>run requests against the route using <code>TestRoute.run(request)</code> which will return a <code>TestResponse</code></li>
  <li>use the methods of <code>TestResponse</code> to assert on properties of the response</li>
</ul>
<h2><a href="#example" name="example" class="anchor"><span class="anchor-link"></span></a>Example</h2>
<p>To see the testkit in action consider the following simple calculator app service:</p>
<pre class="prettyprint"><code class="language-java"><br/>import akka.actor.ActorSystem;
import akka.http.javadsl.ConnectHttp;
import akka.http.javadsl.Http;
import akka.http.javadsl.server.AllDirectives;
import akka.http.javadsl.server.Route;
import akka.http.javadsl.unmarshalling.StringUnmarshallers;
import akka.http.javadsl.server.examples.simple.SimpleServerApp;
import akka.stream.ActorMaterializer;

import java.io.IOException;

public class MyAppService extends AllDirectives {

  public String add(double x, double y) {
    return &quot;x + y = &quot; + (x + y);
  }

  public Route createRoute() {
    return
      get(() -&gt;
        pathPrefix(&quot;calculator&quot;, () -&gt;
          path(&quot;add&quot;, () -&gt;
            parameter(StringUnmarshallers.DOUBLE, &quot;x&quot;, x -&gt;
              parameter(StringUnmarshallers.DOUBLE, &quot;y&quot;, y -&gt;
                complete(add(x, y))
              )
            )
          )
        )
      );
  }

  public static void main(String[] args) throws IOException {
    final ActorSystem system = ActorSystem.create();
    final ActorMaterializer materializer = ActorMaterializer.create(system);

    final SimpleServerApp app = new SimpleServerApp();

    final ConnectHttp host = ConnectHttp.toHost(&quot;127.0.0.1&quot;);

    Http.get(system).bindAndHandle(app.createRoute().flow(system, materializer), host, materializer);

    System.console().readLine(&quot;Type RETURN to exit...&quot;);
    system.terminate();
  }
}</code></pre>
<p>The app extends from <code>HttpApp</code> which brings all of the directives into scope. Method <code>createRoute</code> needs to be implemented to return the complete route of the app.</p>
<p>Here&rsquo;s how you would test that service:</p>
<pre class="prettyprint"><code class="language-java">import akka.http.javadsl.model.HttpRequest;
import akka.http.javadsl.model.StatusCodes;
import akka.http.javadsl.testkit.JUnitRouteTest;
import akka.http.javadsl.testkit.TestRoute;
import org.junit.Test;

public class TestkitExampleTest extends JUnitRouteTest {
    TestRoute appRoute = testRoute(new MyAppService().createRoute());

    @Test
    public void testCalculatorAdd() {
        // test happy path
        appRoute.run(HttpRequest.GET(&quot;/calculator/add?x=4.2&amp;y=2.3&quot;))
            .assertStatusCode(200)
            .assertEntity(&quot;x + y = 6.5&quot;);

        // test responses to potential errors
        appRoute.run(HttpRequest.GET(&quot;/calculator/add?x=3.2&quot;))
            .assertStatusCode(StatusCodes.NOT_FOUND) // 404
            .assertEntity(&quot;Request is missing required query parameter &#39;y&#39;&quot;);

        // test responses to potential errors
        appRoute.run(HttpRequest.GET(&quot;/calculator/add?x=3.2&amp;y=three&quot;))
            .assertStatusCode(StatusCodes.BAD_REQUEST)
            .assertEntity(&quot;The query parameter &#39;y&#39; was malformed:\n&quot; +
                    &quot;&#39;three&#39; is not a valid 64-bit floating point value&quot;);
    }
}</code></pre>
<h2><a href="#writing-asserting-against-the-httpresponse" name="writing-asserting-against-the-httpresponse" class="anchor"><span class="anchor-link"></span></a>Writing Asserting against the HttpResponse</h2>
<p>The testkit supports a fluent DSL to write compact assertions on the response by chaining assertions using &ldquo;dot-syntax&rdquo;. To simplify working with streamed responses the entity of the response is first &ldquo;strictified&rdquo;, i.e. entity data is collected into a single <code>ByteString</code> and provided the entity is supplied as an <code>HttpEntityStrict</code>. This allows to write several assertions against the same entity data which wouldn&rsquo;t (necessarily) be possible for the streamed version.</p>
<p>All of the defined assertions provide HTTP specific error messages aiding in diagnosing problems.</p>
<p>Currently, these methods are defined on <code>TestResponse</code> to assert on the response:</p>
<table>
  <thead>
    <tr>
      <th>Inspector </th>
      <th>Description </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>assertStatusCode(int expectedCode)</code> </td>
      <td>Asserts that the numeric response status code equals the expected one </td>
    </tr>
    <tr>
      <td><code>assertStatusCode(StatusCode expectedCode)</code> </td>
      <td>Asserts that the response <code>StatusCode</code> equals the expected one </td>
    </tr>
    <tr>
      <td><code>assertMediaType(String expectedType)</code> </td>
      <td>Asserts that the media type part of the response&rsquo;s content type matches the given String </td>
    </tr>
    <tr>
      <td><code>assertMediaType(MediaType expectedType)</code> </td>
      <td>Asserts that the media type part of the response&rsquo;s content type matches the given <code>MediaType</code> </td>
    </tr>
    <tr>
      <td><code>assertEntity(String expectedStringContent)</code> </td>
      <td>Asserts that the entity data interpreted as UTF8 equals the expected String </td>
    </tr>
    <tr>
      <td><code>assertEntityBytes(ByteString expectedBytes)</code> </td>
      <td>Asserts that the entity data bytes equal the expected ones </td>
    </tr>
    <tr>
      <td><code>assertEntityAs(Unmarshaller&lt;T&gt; unmarshaller, expectedValue: T)</code> </td>
      <td>Asserts that the entity data if unmarshalled with the given marshaller equals the given value </td>
    </tr>
    <tr>
      <td><code>assertHeaderExists(HttpHeader expectedHeader)</code> </td>
      <td>Asserts that the response contains an HttpHeader instance equal to the expected one </td>
    </tr>
    <tr>
      <td><code>assertHeaderKindExists(String expectedHeaderName)</code> </td>
      <td>Asserts that the response contains a header with the expected name </td>
    </tr>
    <tr>
      <td><code>assertHeader(String name, String expectedValue)</code> </td>
      <td>Asserts that the response contains a header with the given name and value. </td>
    </tr>
  </tbody>
</table>
<p>It&rsquo;s, of course, possible to use any other means of writing assertions by inspecting the properties the response manually. As written above, <code>TestResponse.entity</code> and <code>TestResponse.response</code> return strict versions of the entity data.</p>
<h2><a href="#supporting-custom-test-frameworks" name="supporting-custom-test-frameworks" class="anchor"><span class="anchor-link"></span></a>Supporting Custom Test Frameworks</h2>
<p>Adding support for a custom test framework is achieved by creating new superclass analogous to <code>JUnitRouteTest</code> for writing tests with the custom test framework deriving from <code>akka.http.javadsl.testkit.RouteTest</code> and implementing its abstract methods. This will allow users of the test framework to use <code>testRoute</code> and to write assertions using the assertion methods defined on <code>TestResponse</code>.</p>
<h2><a href="#testing-sealed-routes" name="testing-sealed-routes" class="anchor"><span class="anchor-link"></span></a>Testing sealed Routes</h2>
<p>The section above describes how to test a &ldquo;regular&rdquo; branch of your route structure, which reacts to incoming requests with HTTP response parts or rejections. Sometimes, however, you will want to verify that your service also translates <a href="rejections.html#rejections-java">Rejections</a> to HTTP responses in the way you expect.</p>
<p>You do this by calling the <code>seal()</code> method of the <code>Route</code> class. The <code>seal()</code> method applies the logic of <a href="exception-handling.html#exception-handling-java">ExceptionHandler</a> and <a href="rejections.html#the-rejectionhandler">RejectionHandler</a> passed as method arguments to all exceptions and rejections coming back from the route, and translates them to the respective <code>HttpResponse</code>.</p>
<div class="nav-next">
<p><strong>Next:</strong> <a href="../../../java/http/server-side/websocket-support.html">Server-Side WebSocket Support</a></p>
</div>
</div>
<div class="large-3 show-for-large column" data-sticky-container>
<nav class="sidebar sticky" data-sticky data-anchor="docs" data-sticky-on="large">
<div class="page-nav">
<div class="nav-title">On this page:</div>
<div class="nav-toc">
<ul>
  <li><a href="../../../java/http/routing-dsl/testkit.html#route-testkit">Route Testkit</a>
  <ul>
    <li><a href="../../../java/http/routing-dsl/testkit.html#example">Example</a></li>
    <li><a href="../../../java/http/routing-dsl/testkit.html#writing-asserting-against-the-httpresponse">Writing Asserting against the HttpResponse</a></li>
    <li><a href="../../../java/http/routing-dsl/testkit.html#supporting-custom-test-frameworks">Supporting Custom Test Frameworks</a></li>
    <li><a href="../../../java/http/routing-dsl/testkit.html#testing-sealed-routes">Testing sealed Routes</a></li>
  </ul></li>
</ul>
</div>
</div>
</nav>
</div>
</div>

</section>
</div>

</div>

<footer class="site-footer">

<section class="site-footer-nav">
<div class="expanded row">
<div class="small-12 large-offset-2 large-10 column">
<div class="row site-footer-content">

<div class="small-12 medium-4 large-3 text-center column">
<div class="nav-links">
<ul>
<!-- <li><a href="https://www.example.com/products/">Products</a> -->
</ul>
</div>
</div>

</div>
</div>
</div>
</section>

<section class="site-footer-base">
<div class="expanded row">
<div class="small-12 large-offset-2 large-10 column">
<div class="row site-footer-content">

<div class="small-12 text-center large-9 column">

<!--
<div class="copyright">
<span class="text">&copy; 2017</span>
<a href="https://www.example.com" class="logo">logo</a>
</div>
-->
</div>

</div>
</div>
</div>
</section>
</footer>

</div>
</div>
</div>
</body>

<script type="text/javascript" src="../../../lib/foundation/dist/foundation.min.js"></script>
<script type="text/javascript">jQuery(document).foundation();</script>
<script type="text/javascript" src="../../../js/magellan.js"></script>

<style type="text/css">@import "../../../lib/prettify/prettify.css";</style>
<script type="text/javascript" src="../../../lib/prettify/prettify.js"></script>
<script type="text/javascript" src="../../../lib/prettify/lang-scala.js"></script>
<script type="text/javascript">jQuery(function(){window.prettyPrint && prettyPrint()});</script>

</html>
