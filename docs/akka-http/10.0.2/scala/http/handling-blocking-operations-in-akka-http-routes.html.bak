<!DOCTYPE html>
<html class="no-js" lang="en">

<head>
<title>Handling blocking operations in Akka HTTP · Akka HTTP</title>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="description" content='akka-http-docs'/>
<link href="https://fonts.googleapis.com/css?family=Roboto:100normal,100italic,300normal,300italic,400normal,400italic,500normal,500italic,700normal,700italic,900normal,900italicc" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../lib/jquery/jquery.min.js"></script>
<script type="text/javascript" src="../../js/page.js"></script>
<link rel="stylesheet" type="text/css" href="../../lib/normalize.css/normalize.css"/>
<link rel="stylesheet" type="text/css" href="../../lib/foundation/dist/foundation.min.css"/>
<link rel="stylesheet" type="text/css" href="../../css/page.css"/>

<!--
<link rel="shortcut icon" href="../../images/favicon.ico" />
-->
</head>

<body>
<div class="off-canvas-wrapper">
<div class="off-canvas-wrapper-inner" data-off-canvas-wrapper>

<div class="off-canvas position-left" id="off-canvas-menu" data-off-canvas>
<nav class="off-canvas-nav">
<div class="nav-home">
<a href="../../index.html" >
<span class="home-icon">⌂</span>Akka HTTP
</a>
<div class="version-number">
10.0.2+20170123-1954
</div>
</div>
<div class="nav-toc">
<ul>
  <li><a href="../../java.html">Java Documentation</a>
  <ul>
    <li><a href="../../java/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../java/http/introduction.html">Introduction</a></li>
      <li><a href="../../java/http/configuration.html">Configuration</a></li>
      <li><a href="../../java/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../java/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../java/http/server-side/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../java/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../java/http/server-side/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../java/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../java/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../java/http/migration-guide/index.html">Migration Guides (Java)</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../scala.html">Scala Documentation</a>
  <ul>
    <li><a href="../../scala/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../scala/http/introduction.html">Introduction</a></li>
      <li><a href="../../scala/http/configuration.html">Configuration</a></li>
      <li><a href="../../scala/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../scala/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../scala/http/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../scala/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../scala/http/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../scala/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../scala/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../scala/http/handling-blocking-operations-in-akka-http-routes.html" class="active">Handling blocking operations in Akka HTTP</a></li>
      <li><a href="../../scala/http/migration-guide/index.html">Migration Guides</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../security.html">Security announcements</a></li>
</ul>
</div>

</nav>
</div>

<div class="off-canvas-content" data-off-canvas-content>

<header class="site-header expanded row">
<div class="small-12 column">
<a href="#" class="off-canvas-toggle hide-for-medium" data-toggle="off-canvas-menu"><svg class="svg-icon svg-icon-menu" version="1.1" id="Menu" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"> <path class="svg-icon-menu-path" fill="#53CDEC" d="M16.4,9H3.6C3.048,9,3,9.447,3,10c0,0.553,0.048,1,0.6,1H16.4c0.552,0,0.6-0.447,0.6-1C17,9.447,16.952,9,16.4,9z M16.4,13
H3.6C3.048,13,3,13.447,3,14c0,0.553,0.048,1,0.6,1H16.4c0.552,0,0.6-0.447,0.6-1C17,13.447,16.952,13,16.4,13z M3.6,7H16.4
C16.952,7,17,6.553,17,6c0-0.553-0.048-1-0.6-1H3.6C3.048,5,3,5.447,3,6C3,6.553,3.048,7,3.6,7z"/></svg>
</a>
<div class="title"><a href="../../index.html">Akka HTTP</a></div>

<!--
<a href="https://www.example.com" class="logo show-for-medium">logo</a>
-->
</div>
</header>

<div class="expanded row">

<div class="medium-3 large-2 show-for-medium column">
<nav class="site-nav">
<div class="nav-home">
<a href="../../index.html" >
<span class="home-icon">⌂</span>Akka HTTP
</a>
<div class="version-number">
10.0.2+20170123-1954
</div>
</div>
<div class="nav-toc">
<ul>
  <li><a href="../../java.html">Java Documentation</a>
  <ul>
    <li><a href="../../java/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../java/http/introduction.html">Introduction</a></li>
      <li><a href="../../java/http/configuration.html">Configuration</a></li>
      <li><a href="../../java/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../java/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../java/http/server-side/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../java/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../java/http/server-side/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../java/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../java/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../java/http/migration-guide/index.html">Migration Guides (Java)</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../scala.html">Scala Documentation</a>
  <ul>
    <li><a href="../../scala/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../scala/http/introduction.html">Introduction</a></li>
      <li><a href="../../scala/http/configuration.html">Configuration</a></li>
      <li><a href="../../scala/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../scala/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../scala/http/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../scala/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../scala/http/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../scala/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../scala/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../scala/http/handling-blocking-operations-in-akka-http-routes.html" class="active">Handling blocking operations in Akka HTTP</a></li>
      <li><a href="../../scala/http/migration-guide/index.html">Migration Guides</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../security.html">Security announcements</a></li>
</ul>
</div>

</nav>
</div>

<div class="small-12 medium-9 large-10 column">
<section class="site-content">

<div class="page-header row">
<div class="medium-12 show-for-medium column">
<div class="nav-breadcrumbs">
<ul>
  <li><a href="../../index.html">Akka HTTP</a></li>
  <li><a href="../../scala.html">Scala Documentation</a></li>
  <li><a href="../../scala/http/index.html">Akka HTTP</a></li>
  <li>Handling blocking operations in Akka HTTP</li>
</ul>
</div>
</div>
</div>

<div class="page-content row">
<div class="small-12 large-9 column" id="docs">
<a id="handling-blocking-in-http-routes-scala"></a>
<h1><a href="#handling-blocking-operations-in-akka-http" name="handling-blocking-operations-in-akka-http" class="anchor"><span class="anchor-link"></span></a>Handling blocking operations in Akka HTTP</h1>
<p>Sometimes it is difficult to avoid performing the blocking operations and there are good chances that the blocking is done inside a Future execution, which may lead to problems. It is important to handle the blocking operations correctly.</p>
<h2><a href="#problem" name="problem" class="anchor"><span class="anchor-link"></span></a>Problem</h2>
<p>Using <code>context.dispatcher</code> as the dispatcher on which the blocking Future executes can be a problem - the same dispatcher is used by the routing infrastructure to actually handle the incoming requests. </p>
<p>If all of the available threads are blocked, the routing infrastructure will end up <em>starving</em>. Therefore, routing infrastructure should not be blocked. Instead, a dedicated dispatcher for blocking operations should be used.</p><div class="callout note "><div class="callout-title">Note</div>
<p>Blocking APIs should also be avoided if possible. Try to find or build Reactive APIs, such that blocking is minimised, or moved over to dedicated dispatchers.</p>
<p>Often when integrating with existing libraries or systems it is not possible to avoid blocking APIs. The following solution explains how to handle blocking operations properly.</p>
<p>Note that the same hints apply to managing blocking operations anywhere in Akka, including in Actors etc.</p></div>
<p>In the thread state diagrams below the colours have the following meaning:</p>
<ul>
  <li>Turquoise - Sleeping state</li>
  <li>Orange - Waiting state</li>
  <li>Green - Runnable state</li>
</ul>
<p>The thread information was recorded using the YourKit profiler, however any good JVM profiler has this feature (including the free and bundled with the Oracle JDK VisualVM, as well as Oracle Flight Recorder). </p>
<h3><a href="#problem-example-blocking-the-default-dispatcher" name="problem-example-blocking-the-default-dispatcher" class="anchor"><span class="anchor-link"></span></a>Problem example: blocking the default dispatcher</h3>
<pre class="prettyprint"><code class="language-scala">// BAD (due to blocking in Future, on default dispatcher)
implicit val defaultDispatcher = system.dispatcher

val routes: Route = post {
  complete {
    Future { // uses defaultDispatcher
      Thread.sleep(5000) // will block on default dispatcher,
      System.currentTimeMillis().toString // Starving the routing infrastructure
    }
  }
}</code></pre>
<p>Here the app is exposed to a load of continuous GET requests and large numbers of akka.actor.default-dispatcher threads are handling requests. The orange portion of the thread shows that it is idle. Idle threads are fine - they&rsquo;re ready to accept new work. However, large amounts of Turquoise (sleeping) threads are very bad!</p>
<p><img src="DispatcherBehaviourOnBadCode.png" alt="DispatcherBehaviourOnBadCode.png" /></p>
<p>After some time, the app is exposed to the load of POST requests, which will block these threads. For example &ldquo;<code>default-akka.default-dispatcher2,3,4</code>&rdquo; are going into the blocking state, after having been idle. It can be observed that the number of new threads increases, &ldquo;<code>default-akka.actor.default-dispatcher 18,19,20,...</code>&rdquo; however they go to sleep state immediately, thus wasting the resources.</p>
<p>The number of such new threads depends on the default dispatcher configuration, but it will likely not exceed 50. Since many POST requests are being processed, the entire thread pool is starved. The blocking operations dominate such that the routing infra has no thread available to handle the other requests.</p>
<p>In essence, the <code>Thread.sleep</code> operation has dominated all threads and caused anything executing on the default dispatcher to starve for resources (including any Actors that you have not configured an explicit dispatcher for).</p>
<h2><a href="#solution-dedicated-dispatcher-for-blocking-operations" name="solution-dedicated-dispatcher-for-blocking-operations" class="anchor"><span class="anchor-link"></span></a>Solution: Dedicated dispatcher for blocking operations</h2>
<p>In <code>application.conf</code>, the dispatcher dedicated to blocking behaviour should be configured as follows:</p>
<pre class="prettyprint"><code class="language-conf">my-blocking-dispatcher {
  type = Dispatcher
  executor = &quot;thread-pool-executor&quot;
  thread-pool-executor {
    // or in Akka 2.4.2+
    fixed-pool-size = 16
  }
  throughput = 100
}
</code></pre>
<p>There are many dispatcher options available which can be found in <a href="https://doc.akka.io/docs/akka/2.4.16/scala/dispatchers.html">Dispatchers</a>.</p>
<p>Here <code>thread-pool-executor</code> is used, which has a hardcoded limit of threads. It keeps a set number of threads available that allow for safe isolation of the blocking operations. The size settings should depend on the app&rsquo;s functionality and the number of cores the server has.</p>
<p>Whenever blocking has to be done, use the above configured dispatcher instead of the default one:</p>
<pre class="prettyprint"><code class="language-scala">// GOOD (the blocking is now isolated onto a dedicated dispatcher):
implicit val blockingDispatcher = system.dispatchers.lookup(&quot;my-blocking-dispatcher&quot;)

val routes: Route = post {
  complete {
    Future { // uses the good &quot;blocking dispatcher&quot; that we configured,
      // instead of the default dispatcher to isolate the blocking.
      Thread.sleep(5000)
      System.currentTimeMillis().toString
    }
  }
}</code></pre>
<p>This forces the app to use the same load, initially normal requests and then the blocking requests. The thread pool behaviour is shown in the figure.</p>
<p><img src="DispatcherBehaviourOnGoodCode.png" alt="DispatcherBehaviourOnGoodCode.png" /></p>
<p>Initially, the normal requests are easily handled by the default dispatcher - the green lines, which represent the actual execution.</p>
<p>When blocking operations are issued, the <code>my-blocking-dispatcher</code> starts up to the number of configured threads. It handles sleeping. After a certain period of nothing happening to the threads, it shuts them down.</p>
<p>If another bunch of operations have to be done, the pool will start new threads that will take care of putting them into sleep state, but the threads are not wasted.</p>
<p>In this case, the throughput of the normal GET requests was not impacted - they were still served on the default dispatcher.</p>
<p>This is the recommended way of dealing with any kind of blocking in reactive applications. It is referred to as &ldquo;bulkheading&rdquo; or &ldquo;isolating&rdquo; the bad behaving parts of an app. In this case, bad behaviour of blocking operations.</p>
<p>There is good documentation available in Akka docs section, <a href="https://doc.akka.io/docs/akka/current/general/actor-systems.html#Blocking_Needs_Careful_Management">Blocking needs careful management</a>.</p>
<div class="nav-next">
<p><strong>Next:</strong> <a href="../../scala/http/migration-guide/index.html">Migration Guides</a></p>
</div>
</div>
<div class="large-3 show-for-large column" data-sticky-container>
<nav class="sidebar sticky" data-sticky data-anchor="docs" data-sticky-on="large">
<div class="page-nav">
<div class="nav-title">On this page:</div>
<div class="nav-toc">
<ul>
  <li><a href="../../scala/http/handling-blocking-operations-in-akka-http-routes.html#handling-blocking-operations-in-akka-http">Handling blocking operations in Akka HTTP</a>
  <ul>
    <li><a href="../../scala/http/handling-blocking-operations-in-akka-http-routes.html#problem">Problem</a>
    <ul>
      <li><a href="../../scala/http/handling-blocking-operations-in-akka-http-routes.html#problem-example-blocking-the-default-dispatcher">Problem example: blocking the default dispatcher</a></li>
    </ul></li>
    <li><a href="../../scala/http/handling-blocking-operations-in-akka-http-routes.html#solution-dedicated-dispatcher-for-blocking-operations">Solution: Dedicated dispatcher for blocking operations</a></li>
  </ul></li>
</ul>
</div>
</div>
</nav>
</div>
</div>

</section>
</div>

</div>

<footer class="site-footer">

<section class="site-footer-nav">
<div class="expanded row">
<div class="small-12 large-offset-2 large-10 column">
<div class="row site-footer-content">

<div class="small-12 medium-4 large-3 text-center column">
<div class="nav-links">
<ul>
<!-- <li><a href="https://www.example.com/products/">Products</a> -->
</ul>
</div>
</div>

</div>
</div>
</div>
</section>

<section class="site-footer-base">
<div class="expanded row">
<div class="small-12 large-offset-2 large-10 column">
<div class="row site-footer-content">

<div class="small-12 text-center large-9 column">

<!--
<div class="copyright">
<span class="text">&copy; 2017</span>
<a href="https://www.example.com" class="logo">logo</a>
</div>
-->
</div>

</div>
</div>
</div>
</section>
</footer>

</div>
</div>
</div>
</body>

<script type="text/javascript" src="../../lib/foundation/dist/foundation.min.js"></script>
<script type="text/javascript">jQuery(document).foundation();</script>
<script type="text/javascript" src="../../js/magellan.js"></script>

<style type="text/css">@import "../../lib/prettify/prettify.css";</style>
<script type="text/javascript" src="../../lib/prettify/prettify.js"></script>
<script type="text/javascript" src="../../lib/prettify/lang-scala.js"></script>
<script type="text/javascript">jQuery(function(){window.prettyPrint && prettyPrint()});</script>

</html>
