<!DOCTYPE html>
<html class="no-js" lang="en">

<head>
<title>JSON Support · Akka HTTP</title>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="description" content='akka-http-docs'/>
<link href="https://fonts.googleapis.com/css?family=Roboto:100normal,100italic,300normal,300italic,400normal,400italic,500normal,500italic,700normal,700italic,900normal,900italicc" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../../lib/jquery/jquery.min.js"></script>
<script type="text/javascript" src="../../../js/page.js"></script>
<link rel="stylesheet" type="text/css" href="../../../lib/normalize.css/normalize.css"/>
<link rel="stylesheet" type="text/css" href="../../../lib/foundation/dist/foundation.min.css"/>
<link rel="stylesheet" type="text/css" href="../../../css/page.css"/>

<!--
<link rel="shortcut icon" href="../../../images/favicon.ico" />
-->
</head>

<body>
<div class="off-canvas-wrapper">
<div class="off-canvas-wrapper-inner" data-off-canvas-wrapper>

<div class="off-canvas position-left" id="off-canvas-menu" data-off-canvas>
<nav class="off-canvas-nav">
<div class="nav-home">
<a href="../../../index.html" >
<span class="home-icon">⌂</span>Akka HTTP
</a>
<div class="version-number">
10.0.2+20170123-1954
</div>
</div>
<div class="nav-toc">
<ul>
  <li><a href="../../../java.html">Java Documentation</a>
  <ul>
    <li><a href="../../../java/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../../java/http/introduction.html">Introduction</a></li>
      <li><a href="../../../java/http/configuration.html">Configuration</a></li>
      <li><a href="../../../java/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../../java/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../../java/http/server-side/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../../java/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../../java/http/server-side/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../../java/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../../java/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../../java/http/migration-guide/index.html">Migration Guides (Java)</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../../scala.html">Scala Documentation</a>
  <ul>
    <li><a href="../../../scala/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../../scala/http/introduction.html">Introduction</a></li>
      <li><a href="../../../scala/http/configuration.html">Configuration</a></li>
      <li><a href="../../../scala/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../../scala/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../../scala/http/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../../scala/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../../scala/http/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../../scala/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../../scala/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../../scala/http/handling-blocking-operations-in-akka-http-routes.html">Handling blocking operations in Akka HTTP</a></li>
      <li><a href="../../../scala/http/migration-guide/index.html">Migration Guides</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../../security.html">Security announcements</a></li>
</ul>
</div>

</nav>
</div>

<div class="off-canvas-content" data-off-canvas-content>

<header class="site-header expanded row">
<div class="small-12 column">
<a href="#" class="off-canvas-toggle hide-for-medium" data-toggle="off-canvas-menu"><svg class="svg-icon svg-icon-menu" version="1.1" id="Menu" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 20 20" enable-background="new 0 0 20 20" xml:space="preserve"> <path class="svg-icon-menu-path" fill="#53CDEC" d="M16.4,9H3.6C3.048,9,3,9.447,3,10c0,0.553,0.048,1,0.6,1H16.4c0.552,0,0.6-0.447,0.6-1C17,9.447,16.952,9,16.4,9z M16.4,13
H3.6C3.048,13,3,13.447,3,14c0,0.553,0.048,1,0.6,1H16.4c0.552,0,0.6-0.447,0.6-1C17,13.447,16.952,13,16.4,13z M3.6,7H16.4
C16.952,7,17,6.553,17,6c0-0.553-0.048-1-0.6-1H3.6C3.048,5,3,5.447,3,6C3,6.553,3.048,7,3.6,7z"/></svg>
</a>
<div class="title"><a href="../../../index.html">Akka HTTP</a></div>

<!--
<a href="https://www.example.com" class="logo show-for-medium">logo</a>
-->
</div>
</header>

<div class="expanded row">

<div class="medium-3 large-2 show-for-medium column">
<nav class="site-nav">
<div class="nav-home">
<a href="../../../index.html" >
<span class="home-icon">⌂</span>Akka HTTP
</a>
<div class="version-number">
10.0.2+20170123-1954
</div>
</div>
<div class="nav-toc">
<ul>
  <li><a href="../../../java.html">Java Documentation</a>
  <ul>
    <li><a href="../../../java/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../../java/http/introduction.html">Introduction</a></li>
      <li><a href="../../../java/http/configuration.html">Configuration</a></li>
      <li><a href="../../../java/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../../java/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../../java/http/server-side/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../../java/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../../java/http/server-side/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../../java/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../../java/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../../java/http/migration-guide/index.html">Migration Guides (Java)</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../../scala.html">Scala Documentation</a>
  <ul>
    <li><a href="../../../scala/http/index.html">Akka HTTP</a>
    <ul>
      <li><a href="../../../scala/http/introduction.html">Introduction</a></li>
      <li><a href="../../../scala/http/configuration.html">Configuration</a></li>
      <li><a href="../../../scala/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
      <li><a href="../../../scala/http/implications-of-streaming-http-entity.html">Implications of the streaming nature of Request/Response Entities</a></li>
      <li><a href="../../../scala/http/low-level-server-side-api.html">Low-Level Server-Side API</a></li>
      <li><a href="../../../scala/http/routing-dsl/index.html">High-level Server-Side API</a></li>
      <li><a href="../../../scala/http/websocket-support.html">Server-Side WebSocket Support</a></li>
      <li><a href="../../../scala/http/client-side/index.html">Consuming HTTP-based Services (Client-Side)</a></li>
      <li><a href="../../../scala/http/server-side-https-support.html">Server-Side HTTPS Support</a></li>
      <li><a href="../../../scala/http/handling-blocking-operations-in-akka-http-routes.html">Handling blocking operations in Akka HTTP</a></li>
      <li><a href="../../../scala/http/migration-guide/index.html">Migration Guides</a></li>
    </ul></li>
  </ul></li>
  <li><a href="../../../security.html">Security announcements</a></li>
</ul>
</div>

</nav>
</div>

<div class="small-12 medium-9 large-10 column">
<section class="site-content">

<div class="page-header row">
<div class="medium-12 show-for-medium column">
<div class="nav-breadcrumbs">
<ul>
  <li><a href="../../../index.html">Akka HTTP</a></li>
  <li><a href="../../../scala.html">Scala Documentation</a></li>
  <li><a href="../../../scala/http/index.html">Akka HTTP</a></li>
  <li><a href="../../../scala/http/common/index.html">Common Abstractions (Client- and Server-Side)</a></li>
  <li>JSON Support</li>
</ul>
</div>
</div>
</div>

<div class="page-content row">
<div class="small-12 large-9 column" id="docs">
<a id="akka-http-spray-json"></a>
<h1><a href="#json-support" name="json-support" class="anchor"><span class="anchor-link"></span></a>JSON Support</h1>
<p>Akka HTTP&rsquo;s <a href="marshalling.html#http-marshalling-scala">marshalling</a> and <a href="unmarshalling.html#http-unmarshalling-scala">unmarshalling</a> infrastructure makes it rather easy to seamlessly support specific wire representations of your data objects, like JSON, XML or even binary encodings.</p>
<p>For JSON Akka HTTP currently provides support for <a href="https://github.com/spray/spray-json">spray-json</a> right out of the box through its <code>akka-http-spray-json</code> module.</p>
<p>Other JSON libraries are supported by the community. See <a href="https://akka.io/community/#extensions-to-akka-http">the list of current community extensions for Akka HTTP</a>.</p>
<h2><a href="#spray-json-support" name="spray-json-support" class="anchor"><span class="anchor-link"></span></a>spray-json Support</h2>
<p>The <a href="http://github.com/akka/akka-http/tree/v10.0.2+20170123-1954/akka-http-marshallers-scala/akka-http-spray-json/src/main/scala/akka/http/scaladsl/marshallers/sprayjson/SprayJsonSupport.scala">SprayJsonSupport</a> trait provides a <code>FromEntityUnmarshaller[T]</code> and <code>ToEntityMarshaller[T]</code> for every type <code>T</code> that an implicit <code>spray.json.RootJsonReader</code> and/or <code>spray.json.RootJsonWriter</code> (respectively) is available for.</p>
<p>To enable automatic support for (un)marshalling from and to JSON with <a href="https://github.com/spray/spray-json">spray-json</a>, add a library dependency onto:</p>
<pre class="prettyprint"><code class="language-sbt">&quot;com.typesafe.akka&quot; %% &quot;akka-http-spray-json&quot; % &quot;10.0.2+20170123-1954&quot;
</code></pre>
<p>Next, provide a <code>RootJsonFormat[T]</code> for your type and bring it into scope. Check out the <a href="https://github.com/spray/spray-json">spray-json</a> documentation for more info on how to do this.</p>
<p>Finally, import the <code>FromEntityUnmarshaller[T]</code> and <code>ToEntityMarshaller[T]</code> implicits directly from <code>SprayJsonSupport</code> as shown in the example below or mix the <code>akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport</code> trait into your JSON support module.</p>
<p>Once you have done this (un)marshalling between JSON and your type <code>T</code> should work nicely and transparently.</p>
<pre class="prettyprint"><code class="language-scala">import akka.http.scaladsl.server.Directives
import akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport
import spray.json._

// domain model
final case class Item(name: String, id: Long)
final case class Order(items: List[Item])

// collect your json format instances into a support trait:
trait JsonSupport extends SprayJsonSupport with DefaultJsonProtocol {
  implicit val itemFormat = jsonFormat2(Item)
  implicit val orderFormat = jsonFormat1(Order) // contains List[Item]
}

// use it wherever json (un)marshalling is needed
class MyJsonService extends Directives with JsonSupport {

  // format: OFF
  val route =
    get {
      pathSingleSlash {
        complete(Item(&quot;thing&quot;, 42)) // will render as JSON
      }
    } ~
    post {
      entity(as[Order]) { order =&gt; // will unmarshal JSON to Order
        val itemsCount = order.items.size
        val itemNames = order.items.map(_.name).mkString(&quot;, &quot;)
        complete(s&quot;Ordered $itemsCount items: $itemNames&quot;)
      }
    }
  // format: ON
}</code></pre>
<h3><a href="#pretty-printing" name="pretty-printing" class="anchor"><span class="anchor-link"></span></a>Pretty printing</h3>
<p>By default, spray-json marshals your types to compact printed JSON by implicit conversion using <code>CompactPrinter</code>, as defined in:</p>
<pre class="prettyprint"><code class="language-scala">implicit def sprayJsonMarshallerConverter[T](writer: RootJsonWriter[T])(implicit printer: JsonPrinter = CompactPrinter): ToEntityMarshaller[T] =
  sprayJsonMarshaller[T](writer, printer)</code></pre>
<p>Alternatively to marshal your types to pretty printed JSON, bring a <code>PrettyPrinter</code> in scope to perform implicit conversion.</p>
<pre class="prettyprint"><code class="language-scala">import akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport._
import spray.json._

// domain model
final case class PrettyPrintedItem(name: String, id: Long)

object PrettyJsonFormatSupport {
  import DefaultJsonProtocol._
  implicit val printer = PrettyPrinter
  implicit val prettyPrintedItemFormat = jsonFormat2(PrettyPrintedItem)
}

// use it wherever json (un)marshalling is needed
class MyJsonService extends Directives {
  import PrettyJsonFormatSupport._

  // format: OFF
  val route =
    get {
      pathSingleSlash {
        complete {
          PrettyPrintedItem(&quot;akka&quot;, 42) // will render as JSON
        }
      }
    }
  // format: ON
}

val service = new MyJsonService

// verify the pretty printed JSON
Get(&quot;/&quot;) ~&gt; service.route ~&gt; check {
  responseAs[String] shouldEqual
    &quot;&quot;&quot;{&quot;&quot;&quot; + &quot;\n&quot; +
    &quot;&quot;&quot;  &quot;name&quot;: &quot;akka&quot;,&quot;&quot;&quot; + &quot;\n&quot; +
    &quot;&quot;&quot;  &quot;id&quot;: 42&quot;&quot;&quot; + &quot;\n&quot; +
    &quot;&quot;&quot;}&quot;&quot;&quot;
}</code></pre>
<p>To learn more about how spray-json works please refer to its <a href="https://github.com/spray/spray-json">documentation</a>.</p>
<div class="nav-next">
<p><strong>Next:</strong> <a href="../../../scala/http/common/xml-support.html">XML Support</a></p>
</div>
</div>
<div class="large-3 show-for-large column" data-sticky-container>
<nav class="sidebar sticky" data-sticky data-anchor="docs" data-sticky-on="large">
<div class="page-nav">
<div class="nav-title">On this page:</div>
<div class="nav-toc">
<ul>
  <li><a href="../../../scala/http/common/json-support.html#json-support">JSON Support</a>
  <ul>
    <li><a href="../../../scala/http/common/json-support.html#spray-json-support">spray-json Support</a>
    <ul>
      <li><a href="../../../scala/http/common/json-support.html#pretty-printing">Pretty printing</a></li>
    </ul></li>
  </ul></li>
</ul>
</div>
</div>
</nav>
</div>
</div>

</section>
</div>

</div>

<footer class="site-footer">

<section class="site-footer-nav">
<div class="expanded row">
<div class="small-12 large-offset-2 large-10 column">
<div class="row site-footer-content">

<div class="small-12 medium-4 large-3 text-center column">
<div class="nav-links">
<ul>
<!-- <li><a href="https://www.example.com/products/">Products</a> -->
</ul>
</div>
</div>

</div>
</div>
</div>
</section>

<section class="site-footer-base">
<div class="expanded row">
<div class="small-12 large-offset-2 large-10 column">
<div class="row site-footer-content">

<div class="small-12 text-center large-9 column">

<!--
<div class="copyright">
<span class="text">&copy; 2017</span>
<a href="https://www.example.com" class="logo">logo</a>
</div>
-->
</div>

</div>
</div>
</div>
</section>
</footer>

</div>
</div>
</div>
</body>

<script type="text/javascript" src="../../../lib/foundation/dist/foundation.min.js"></script>
<script type="text/javascript">jQuery(document).foundation();</script>
<script type="text/javascript" src="../../../js/magellan.js"></script>

<style type="text/css">@import "../../../lib/prettify/prettify.css";</style>
<script type="text/javascript" src="../../../lib/prettify/prettify.js"></script>
<script type="text/javascript" src="../../../lib/prettify/lang-scala.js"></script>
<script type="text/javascript">jQuery(function(){window.prettyPrint && prettyPrint()});</script>

</html>
